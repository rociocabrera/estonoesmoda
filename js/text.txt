/* 

Qué es DOM?
Es una estructura de objetos generada por el navegador, la cual representa la página web 
y la cual representa la página HTML actual. Desde JavaScript podemos acceder a ella y 
modificarla.
- Es una representación de la página web en forma de árbol.
- Es una API que nos permite interactuar con el HTML y el CSS de la página web.
- Es una interfaz de programación de aplicaciones (API) para documentos HTML y XML.
- Es una estructura de nodos que se relacionan entre sí, formando un árbol.
- Tiene métodos y propiedades que nos permiten acceder a los nodos y manipularlos.

Cómo funciona?
- El navegador recibe el HTML y lo convierte en nodos.
- Luego, el navegador crea el DOM, que es una representación de esos nodos en forma de árbol.
- Por último, el navegador muestra el DOM en pantalla.

*Todos los objetos son accesibles empleando Js a través del objeto global document.
Ejemplo: document.body, document.head, document.documentElement, etc.

ESTRUCTURA:
En cuanto a estructura se basa en nodos, que son los elementos que componen el DOM.
Cada etiqueta HTML es un nodo. 
Los nodos pueden ser de distintos tipos:

- Elementos HTML
- Atributos HTML
- Texto
- Comentarios
- Documentos
- etc.

Los nodos se relacionan entre sí, formando una estructura de árbol.
El nodo más alto es el nodo raíz, que es el nodo document.
El nodo document tiene un hijo, que es el nodo html.
El nodo html tiene dos hijos, que son los nodos head y body.
Y así sucesivamente.

Consta de métodos y propiedades que nos permiten acceder a los nodos y manipularlos.
Veremos tipos, métodos de acceso y agregar o quitar:

TIPOS DE NODOS(5/12):
- Nodos de tipo documento (document): es el documento HTML completo.
- Nodos de tipo elemento (element): son los elementos HTML, como <p>, <div>, <h1>, etc.
- Nodos de tipo atributo (attr): son los atributos de los elementos HTML, como class, id, etc.
- Nodos de tipo texto (text): son el texto que está dentro de los elementos HTML.
- Nodos de tipo comentario (comment): son los comentarios que están dentro del código HTML.

MÉTODOS DE ACCESO:
- getElementById: accede a un elemento HTML a través de su atributo id.

- getElementsByClassName: accede a un elemento HTML a través de su atributo class.
Retorna un array con todos los elementos que coincidan con la clase.
Por ejemplo: si hay 10 elementos con la clase "item", retorna un array con los 10 elementos.

- getElementsByTagName: accede a un elemento HTML a través de su nombre de etiqueta. 
Es menos específica ya que retorna un array con todos los elementos que coincidan con la etiqueta.
Por ejemplo: si hay 10 <p>, retorna un array con los 10 <p>.

- querySelector: accede a un elemento HTML a través de un selector CSS.

- querySelectorAll: accede a todos los elementos HTML que coincidan con un selector CSS.

AGREGAR O QUITAR:
- createElement: crea un elemento HTML.
- createTextNode: crea un nodo de texto.
- appendChild: agrega un nodo hijo al final de un nodo padre.
- removeChild: quita un nodo hijo de un nodo padre.
- innerHTML: agrega o quita contenido HTML de un elemento.
- setAttribute: agrega o quita un atributo a un elemento.

Es posible editar el DOM desde la consola del navegador (en elements), pero los cambios no se guardan.
Es un medio útil para probar cambios antes de implementarlos en el código.

Para que los cambios se guarden, debemos hacerlo desde el archivo .js.

MODIFICAR NODOS:
- innerHTML: agrega o quita contenido HTML de un elemento.
Ejemplo: document.body.innerHTML = "<h1>Hola</h1>";

- textContent: agrega o quita contenido de texto de un elemento.
Ejemplo: document.body.textContent = "Hola";

- style: agrega o quita estilos CSS a un elemento.
Ejemplo: document.body.style.backgroundColor = "red";

- setAttribute: agrega o quita un atributo a un elemento.
Ejemplo: document.body.setAttribute("class", "dark-mode");

- classList: agrega o quita una clase a un elemento. Es más recomendable que setAttribute
y style ya que no reemplaza el valor anterior, sino que lo agrega.
Además tiene métodos para agregar o quitar clases dado un condicional.
Incluye los métodos add, remove, toggle y contains.
A diferencia del className que reemplaza el valor anterior, classList agrega el nuevo valor.

Ejemplo: document.body.classList.add("dark-mode");


** AGREGAR O QUITAR NODOS:

1 - CREACIÓN DE ELEMENTOS:

- createElement: crea un elemento HTML.
Ejemplo: const newElement = document.createElement("p"); 
Se debe indicar el tipo de elemento que se quiere crear. En este caso, un párrafo.

Luego, se debe agregar el elemento al DOM.
Para ello, se debe indicar el elemento padre al que se quiere agregar el nuevo elemento.
Ejemplo: document.body.appendChild(newElement);

2 - ELIMINAR ELEMENTOS:
Se pueden eliminar elementos del DOM de dos formas:

- removeChild: quita un nodo hijo de un nodo padre.
Ejemplo: document.body.removeChild(newElement);

- remove: quita un elemento del DOM.
Ejemplo: newElement.remove();


OBTENER DATOS DE INPUTS:
- value: obtiene el valor de un input. Además, se puede modificar el valor de un input.
Ejemplo: 
const name = document.getElementById("name").value;
document.getElementById("name").value = "Hola";

CREANDO OPCIONES DESDE UN ARRAY APLICADO A DOM:
- forEach: recorre un array y ejecuta una función por cada elemento.
Ejemplo:
const fruits = ["apple", "banana", "orange"];
fruits.forEach((fruit) => {
  const option = document.createElement("option");
  option.value = fruit;
  option.textContent = fruit;
  document.getElementById("fruits").appendChild(option);
});

PLANTILLAS LITERALES:
- Permite crear cadenas de texto con variables.
- Se utilizan comillas invertidas (``) en lugar de comillas simples ('') o dobles ("").
- Se utilizan ${} para indicar una variable dentro de la cadena de texto.
Ejemplo:
const name = "John";
const age = 30;
const sentence = `My name is ${name} and I'm ${age} years old.`;
console.log(sentence);

PLANTILLAS LITERALEs E INNERHTML:
- Se pueden utilizar plantillas literales para agregar contenido HTML a un elemento.
Ejemplo:
const name = "John";
const age = 30;
const sentence = `My name is ${name} and I'm ${age} years old.`;
document.body.innerHTML = sentence;

Luego con apendChild se puede agregar el elemento al DOM. De la siguiente manera:
const name = "John";
const age = 30;
const sentence = `My name is ${name} and I'm ${age} years old.`;
const newElement = document.createElement("p");
newElement.innerHTML = sentence;
document.body.appendChild(newElement);

QUERY SELECTOR:
- Permite acceder a un elemento HTML a través de un selector CSS.
- Retorna el primer elemento que coincida con el selector.
- Si no encuentra ningún elemento, retorna null.
- Si hay varios elementos que coinciden con el selector, retorna el primero.
- Se utiliza el símbolo $ para indicar que es un selector CSS.
Además se puede utilizar el símbolo # para indicar que es un id 
y el símbolo . para indicar que es una clase ó pseudoclase.

Ejemplo:
const title = document.querySelector(".title");
const paragraph = document.querySelector("#paragraph");
const span = document.querySelector("span");

QUERY SELECTOR ALL:
La diferencia con Query Selector es que retorna todos los elementos que coincidan con 
el selector. Mientras que Query Selector retorna el primero.
Ejemplo:
const paragraphs = document.querySelectorAll("p");

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
EVENTOS
Qué es un evento?
- Es una acción que sucede en la página web. 
Por ejemplo: hacer click, pasar el mouse, etc.

Para qué sirven?
- Para ejecutar código cuando suceden ciertas acciones en la página web. 
Para controlar acciones del usuario y definir comportamientos de la página web.

Cómo funciona? 
- El navegador detecta una acción del usuario. 
- El navegador ejecuta el código que le indicamos.

++++++++++++++++cómo definimos un evento en Javascript?++++++++++++++++

OPCIÓN 1:
Javascript permite controlar los eventos de la página web.
Para ello, se debe indicar el elemento HTML al que se le quiere agregar el evento.
Luego, se debe indicar el evento que se quiere controlar.
Por último, se debe indicar el código que se quiere ejecutar cuando suceda el evento.
Para esto, se utiliza el método addEventListener que recibe dos parámetros: 
el evento (que esperamos)y la función (respuesta). 

Ejemplo:
A la escucha se la denomina handler. (En este caso, clickHandler)
Y a la respuesta se la denomina evenhandler. (En este caso, alert)

Los evenhandler son atributos de los elementos HTML que permiten controlar
los eventos. Se utilizan para ejecutar código cuando suceden ciertas acciones en la 
página web. 
Por ejemplo: hacer click, pasar el mouse, etc.

Así ante cada evento se puede ejecutar una función.

OPCIÓN 2:
También es posible emplear una propiedad del nodo para asignarle un evento.
Las propiedades se indentifican porque no llevan paréntesis, a diferencia de los métodos.
Y se coloca nombre del evento con la palabra on delante.
Ejemplo:
const button = document.getElementById("button");
button.onclick = () => {
  alert("Hola");
};

OPCIÓN 3: SINTAXIS **(MENOS RECOMENDADA)**
Determinando el evento especificando el atributo on y el nombre del evento.
Ejemplo:
<button onclick="alert('Hola')">Click me</button>

DIFERENCIA ENTRE APLICAR OPCIÓN 1 Y 2:
Es que con la opción 1 se puede agregar más de un evento al mismo elemento.
Mientras que con la opción 2, se reemplaza el evento anterior por el nuevo evento.

EVENTOS MÁS COMUNES:
Eventos del mouse: 
- click: se ejecuta cuando se hace click sobre un elemento.
- mousemove: se ejecuta cuando se mueve el mouse sobre un elemento.
- mouseover/ mouseout: se ejecuta cuando el mouse pasa por encima de un elemento.
- mousedown/ mouseup: se ejecuta cuando se presiona o se suelta un botón del mouse sobre un elemento.

Eventos del teclado:
- keydown: se ejecuta cuando se presiona una tecla del teclado sobre un elemento.
- keyup: se ejecuta cuando se suelta una tecla del teclado sobre un elemento.

Evento change:
- change: se ejecuta cuando se cambia el valor de un elemento. <input>, <select> o <textarea>.

Evento submit:
- submit: se ejecuta cuando se envía un formulario.

Eventos de la ventana:
- load: se ejecuta cuando se ha terminado de cargar la página.
- resize: se ejecuta cuando se cambia el tamaño de la ventana.
- scroll: se ejecuta cuando se hace scroll en la página.

INFORMACIÓN DEL EVENTO
qué es?
- Es un objeto que contiene información sobre el evento que se acaba de ejecutar.

cómo se accede?
- Se accede a través del parámetro event que recibe la función que se ejecuta cuando sucede el evento.

qué información contiene?
- Contiene información sobre el evento que se acaba de ejecutar.
- Sobre el elemento que disparó el evento.
- Sobre el elemento que contiene el evento.

Ejemplo:
const button = document.getElementById("button");
button.addEventListener("click", (event) => {
  console.log(event);
});

PROPIEDADES DEL EVENTO:
- target: es el elemento que disparó el evento.
- currentTarget: es el elemento que contiene el evento.
- type: es el tipo de evento.
- keyCode: es el código de la tecla presionada.
- shiftKey: es true si la tecla shift fue presionada.
- ctrlKey: es true si la tecla ctrl fue presionada.
- altKey: es true si la tecla alt fue presionada.
- preventDefault: método que evita que se ejecute la acción por defecto del evento.
Por ejemplo: si se hace click en un enlace, evita que se redirija a la página del enlace.

Ejemplo:
const link = document.getElementById("link");
link.addEventListener("click", (event) => {
  event.preventDefault();
});

EVENTOS DE CARGA:
- load: se ejecuta cuando se ha terminado de cargar la página.
- DOMContentLoaded: se ejecuta cuando se ha terminado de cargar el DOM.

DIFERENCIA ENTRE LOAD Y DOMCONTENTLOADED:
- Load se ejecuta cuando se ha terminado de cargar la página.
- DOMContentLoaded se ejecuta cuando se ha terminado de cargar el DOM.
- El DOM se carga antes que la página.
- Por lo tanto, DOMContentLoaded se ejecuta antes que load.

Ejemplo:
window.addEventListener("load", () => {
  console.log("La página se ha cargado completamente");
});

window.addEventListener("DOMContentLoaded", () => {
  console.log("El DOM se ha cargado completamente");
});


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


/ EJERCICIO DE CLASE: JSON - STORAGE

// El stock.js es un array de objetos que contiene los productos disponibles en el local.
// Lo pasé a un archivo .json para poder usarlo en el localStorage


PARA GUARDAR
//Stringify: convierte un objeto en un string
const productsString = JSON.stringify(availableProducts);

//setItem: agrega un elemento al localStorage
localStorage.setItem("products", productsString);


PARA LEER
//getItem: obtiene un elemento del localStorage
const storedProductsString = localStorage.getItem("products");

//parse: convierte un string en un objeto
const storedProductsArray = JSON.parse(storedProductsString);

console.log(storedProductsArray);


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

/*
OPERADORES AVANZADOS I

operadores ternarios
desestructuración de objetos
desestructuración de arrays
spread operator
identificar oportimización de codigo


***********************OPERADORES Y CONDICIONALES AVANZADOS

SUGAR SINTAX: ES UNA FORMA MAS CORTA DE ESCRIBIR ALGO
Operador de incremento:
i++ es lo mismo que i = i + 1

** operador ternario: 
es una forma mas corta de escribir un if
condicion ? true : false
el operador ? es como un if y los dos puntos : es como un else

ejemplo:
let edad = 18;
let esMayorDeEdad = edad >= 18 ? true : false;
console.log(esMayorDeEdad);

Cuando usamos operadores ternarios, no es necesario usar llaves {} ni la palabra return
Tiene un return implicito

******** Operador lógico AND (&&)*************

Tiene que cumplirse las dos condiciones para que se ejecute el código
Y retorna el último valor que se cumple, el que está a la derecha

let temperatura = 15;
let clima = "lluvioso";

if (temperatura >= 15 && clima === "lluvioso") {
  console.log("Llevar paraguas");
}

cómo lo simplificaría?
temperatura >= 15 && clima === "lluvioso" ? console.log("Llevar paraguas") : null;

ó también: 
temperatura >= 15 && clima === "lluvioso" && console.log("Llevar paraguas"); 

también puedo colocar un alert:
temperatura >= 15 && clima === "lluvioso" ? alert("Llevar paraguas") : null ó alert("No llevar paraguas");


** EJEMPLO CARRITO:

const cart = []

if (cart.length === 0) {
  console.log("El carrito está vacío");
}

cart.length === 0 && console.log("El carrito está vacío");

** Operador lógico OR (||) *************

Tiene que cumplirse una de las dos condiciones para que se ejecute el código
Retorna el primer valor que se cumple, el que está a la izquierda
aunque se cumpla la segunda condición, no se ejecuta el código

El valor FALSY es el que se considera como falso en JS
Los valores falsy son: false, 0, "", null, undefined, NaN

false: es un valor booleano
cero: es un valor numérico
'' (string vacío): es un valor que se le asigna a una variable cuando no tiene ningún valor
null: es un valor que se le asigna a una variable cuando no tiene ningún valor
undefined: es un valor que se le asigna a una variable cuando no se le asignó ningún valor
NaN: es un valor que se le asigna a una variable cuando no es un número

Para qué sirve? 
Para validar si una variable tiene un valor o no y que no sea un valor falsy

ejemplo:
const user1 = {
  name: "Ada",
  age: 27,
}

const user2 = null;

console.log(user1 || "No hay usuario");
console.log(user2 || "No hay usuario");

** OPERADOR NULLISH COALESCING (??) *************

Es un operador que devuelve el valor de la derecha cuando el valor de la izquierda es null o undefined
null ó undefined ?? devuelve el valor de la derecha

OPTIONAL CHAINING (?.)
Concepto de encadenamiento opcional.
Es un operador que permite acceder a propiedades de un objeto sin tener que validar si el objeto existe o no

ejemplo:
const user = null;

console.log(user.name); //error
console.log(user?.name || "user doesn't exist"); //user does not exist

el resultado de esto es: user does not exist dado que user es null

** EJEMPLO CARRITO:

const cart = []

if (cart.length === 0) {
  console.log("El carrito está vacío");
}

cart.length === 0 && console.log("El carrito está vacío");

***** DESESCTRUCTURACIÓN DE OBJETOS **********

CONCEPTO: 
Es una forma de extraer propiedades de un objeto y asignarlas a una variable
Para acceder a las propiedades de un objeto, se usa el punto (.) y el nombre de la propiedad
Ahora, para extraer las propiedades de un objeto, se usa el nombre de la propiedad entre llaves {}

ejemplo:
const user = {
  name: "Ada",
  age: 27,
}

const name = user.name;
const age = user.age;

console.log(name, age); (Esta sería la manera de hacerlo sin desestructuración)
const { name, age } = user; (Esta es la manera de hacerlo con desestructuración)
console.log(name, age);

No sólo puedo acceder a las propiedades del objeto, sino que también puedo asignarle un valor por defecto
const { name, age, country = "Argentina" } = user;
console.log(name, age, country);

También puedo cambiar el nombre de la variable
const { name: userName, age, country = "Argentina" } = user;
console.log(userName, age, country);

También puedo desestructurar un objeto dentro de otro objeto
const user = {
  name: "Ada",
  age: 27,
  address: {
    city: "Buenos Aires",
    country: "Argentina",
  },
};

const { name, age, address: { city, country } } = user;
console.log(name, age, city, country);

DESESTRUCTURACIÓN EN PARAMETROS DE UNA FUNCIÓN

const user = {
  name: "Ro",
  age: 30,
  address: {
    city: "Neuquén",
    country: "Argentina",
  },
};

const showUser = (user) => {
const { name, age, address: { city, country } } = user;
console.log(name, age, city, country);  
};

showUser(user);

ó también puedo hacerlo así:

const showUser = ({ name, age, address: { city, country } }) => {
console.log(name, age, city, country);
};

showUser(user);


***** DESESCTRUCTURACIÓN OBJETO EVENT **********
concepto:
Es una forma de extraer propiedades de un objeto y asignarlas a una variable
Para acceder a las propiedades de un objeto, se usa el punto (.) y el nombre de la propiedad
Ahora, para extraer las propiedades de un objeto, se usa el nombre de la propiedad entre llaves {}

ejemplo:
const showUser = (event) => {
  const { target: { value } } = event;
  console.log(value);
};

Si tendría que reccorrer un array de objetos, lo haría así:

const users = [
  {
    name: "Ada",
    age: 27,
  },
  {
    name: "Grace",
    age: 30,
  },
  
];

const showUser = (event) => {
  const { target: { value } } = event;
  console.log(value);
};

users.forEach((user) => {
  const { name, age } = user;
  console.log(name, age);
});

target: { value } es lo mismo que hacer esto:
const value = event.target.value;

la propiedad target es un objeto que tiene una propiedad value
entonces, para acceder a la propiedad value, tengo que hacer esto:
event.target.value

***** DESESCTRUCTURACIÓN DE ARRAYS **********

concepto:
Es una forma de extraer elementos de un array y asignarlos a una variable
Para acceder a los elementos de un array, se usa el índice del elemento entre corchetes []
Ahora, para extraer los elementos de un array, se usa el índice del elemento entre corchetes []

ejemplo:

const users = ["Ada", "Grace", "Hedy"];

const [firstUser, , thirdUser] = users;

console.log(firstUser);
console.log(thirdUser);

Acá dejo un espacio vacío para que no se desordene el orden de los elementos del array
const [firstUser, , thirdUser] = users;
Esto es lo mismo que hacer esto:

const firstUser = users[0];
const thirdUser = users[2];

console.log(firstUser);

ESTUDIAR: TODO LIST
LUNES: CARRITO DE COMPRAS









*/
